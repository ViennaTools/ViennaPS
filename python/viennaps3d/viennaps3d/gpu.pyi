import viennals3d.viennals3d
import viennaps3d.viennaps3d
from typing import Callable, overload

class Context:
    deviceID: int
    def __init__(self) -> None: ...
    def addModule(self, arg0: str) -> None: ...
    def create(self, modulePath: Path = ..., deviceID: int = ...) -> None: ...
    def destroy(self) -> None: ...

class MultiParticleProcess(ProcessModel):
    def __init__(self) -> None: ...
    def addIonParticle(self, sourcePower: float, thetaRMin: float = ..., thetaRMax: float = ..., minAngle: float = ..., B_sp: float = ..., meanEnergy: float = ..., sigmaEnergy: float = ..., thresholdEnergy: float = ..., inflectAngle: float = ..., n: float = ..., label: str = ...) -> None: ...
    @overload
    def addNeutralParticle(self, stickingProbability: float, label: str = ...) -> None: ...
    @overload
    def addNeutralParticle(self, materialSticking: dict[viennaps3d.viennaps3d.Material, float], defaultStickingProbability: float = ..., label: str = ...) -> None: ...
    def setRateFunction(self, arg0: Callable[[list[float], viennaps3d.viennaps3d.Material], float]) -> None: ...

class Path:
    def __init__(self, arg0: str) -> None: ...

class Process:
    @overload
    def __init__(self, context: Context) -> None: ...
    @overload
    def __init__(self, context: Context, domain: viennaps3d.viennaps3d.Domain, model: ProcessModel, duration: float) -> None: ...
    def apply(self) -> None: ...
    def calculateFlux(self) -> viennals3d.viennals3d.Mesh: ...
    def disableAdvectionVelocityOutput(self) -> None: ...
    def disableRandomSeeds(self) -> None: ...
    def enableAdvectionVelocityOutput(self) -> None: ...
    def enableRandomSeeds(self) -> None: ...
    def getAdvectionParameters(self) -> viennaps3d.viennaps3d.AdvectionParameters: ...
    def getProcessDuration(self) -> float: ...
    def getRayTracingParameters(self) -> viennaps3d.viennaps3d.RayTracingParameters: ...
    def setAdvectionParameters(self, arg0: viennaps3d.viennaps3d.AdvectionParameters) -> None: ...
    def setDomain(self, arg0: viennaps3d.viennaps3d.Domain) -> None: ...
    def setIntegrationScheme(self, arg0) -> None: ...
    def setMaxCoverageInitIterations(self, arg0: int) -> None: ...
    def setNumberOfRaysPerPoint(self, arg0: int) -> None: ...
    def setProcessDuration(self, arg0: float) -> None: ...
    def setProcessModel(self, arg0: ProcessModel) -> None: ...
    def setRayTracingParameters(self, arg0: viennaps3d.viennaps3d.RayTracingParameters) -> None: ...
    def setTimeStepRatio(self, arg0: float) -> None: ...

class ProcessModel:
    def __init__(self, *args, **kwargs) -> None: ...

class SF6O2Etching(viennaps3d.viennaps3d.ProcessModel):
    def __init__(self, parameters: viennaps3d.viennaps3d.SF6O2Parameters) -> None: ...

class SingleParticleProcess(ProcessModel):
    @overload
    def __init__(self, rate: float = ..., stickingProbability: float = ..., sourceExponent: float = ..., maskMaterial: viennaps3d.viennaps3d.Material = ...) -> None: ...
    @overload
    def __init__(self, rate: float, stickingProbability: float, sourceExponent: float, maskMaterials: list[viennaps3d.viennaps3d.Material]) -> None: ...
    @overload
    def __init__(self, materialRates: dict[viennaps3d.viennaps3d.Material, float], stickingProbability: float, sourceExponent: float) -> None: ...
