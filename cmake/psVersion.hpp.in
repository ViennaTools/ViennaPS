#pragma once

namespace viennaps {

// Version information generated by CMake
inline constexpr const char *version = "@PROJECT_VERSION@";
inline constexpr int versionMajor = @PROJECT_VERSION_MAJOR@;
inline constexpr int versionMinor = @PROJECT_VERSION_MINOR@;
inline constexpr int versionPatch = @PROJECT_VERSION_PATCH@;

// Utility functions for version comparison
inline constexpr uint32_t versionAsInteger() {
  // Encode as MMmmpppp (2 digits major, 2 digits minor, 4 digits patch)
  return static_cast<uint32_t>(versionMajor) * 1000000 +
         static_cast<uint32_t>(versionMinor) * 10000 +
         static_cast<uint32_t>(versionPatch);
}

inline constexpr bool isVersionAtLeast(int major, int minor = 0,
                                       int patch = 0) {
  if (versionMajor > major)
    return true;
  if (versionMajor < major)
    return false;
  if (versionMinor > minor)
    return true;
  if (versionMinor < minor)
    return false;
  return versionPatch >= patch;
}

// Version as string for display purposes
inline constexpr const char *versionString() { return version; }

} // namespace viennaps
