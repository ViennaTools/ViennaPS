### ViennaPS v4.0.0

This release introduces a major rework of the **process framework**. Processes now use a modular **flux engine** with better GPU integration. The engine can be selected at runtime via `setFluxEngineType()`, with options `CPU_DISK` (default) and `GPU_TRIANGLE` (when built with GPU support).

The **Python bindings** were unified. Instead of `viennaps2d` and `viennaps3d`, there is now a single package `viennaps` with submodules `viennaps.d2` and `viennaps.d3`. The top-level package defaults to 2D, but this can be changed with `viennaps.setDimension()`.

**AtomicLayerProcess** was removed. Atomic-layer and standard processes are now handled by the same `Process()` class. A new `AtomicLayerProcessParameters` struct controls ALD-specific settings. Similarly, `CoverageParameters`, `RayTracingParameters`, and `AdvectionParameters` were introduced. Parameters can now only be set through these structs, not directly on the process object.

Examples, GPU models, and Python stubs were updated accordingly. More details below.

---

## Highlights

* New **process framework** with pluggable flux engine.
* Better **GPU integration** across processes.
* **Modular flux engine** selection via `setFluxEngineType(...)`.
* **Python bindings unified**: single package `viennaps` with `viennaps.d2` and `viennaps.d3`.

## Breaking changes

* Python packages `viennaps2d` and `viennaps3d` are removed. Use `viennaps`.
* Default Python dimension is **2D** when using top-level `viennaps.*`.
* Dimension can be changed at runtime with `viennaps.setDimension(2 | 3)`.
* Some examples and scripts moved/renamed to match the new API and GPU options.
* **AtomicLayerProcess** was removed. ALD and related atomic-layer processes are now handled by the standard `Process()` class.
* All process parameters must now be set through **parameter structs** (not directly on the process).

## New / changed API

### Flux engine (C++ and Python)

* Processes expose a **flux engine switch**:

  * `CPU_DISK` (default)
  * `GPU_TRIANGLE` (requires GPU build)
* Method on process objects:

  ```cpp
  // C++
  auto proc = ps::Process(...);
  proc.setFluxEngineType(ps::FluxEngineType::CPU_DISK);
  // or
  proc.setFluxEngineType(ps::FluxEngineType::GPU_TRIANGLE);
  ```

  ```python
  # Python
  import viennaps as vps
  p = vps.Process(...)
  p.setFluxEngineType(vps.FluxEngineType.CPU_DISK)
  # or, if built with GPU
  p.setFluxEngineType(vps.FluxEngineType.GPU_TRIANGLE)
  ```

### Python bindings

* Single package:

  ```python
  import viennaps as vps

  # default is 2D
  dom = vps.Domain(...)

  # explicit 2D/3D via submodules
  from viennaps import d2, d3
  dom2 = d2.Domain(...)
  dom3 = d3.Domain(...)

  # switch default dimension globally
  vps.setDimension(3)
  dom = vps.Domain(...)  # now 3D
  ```

### Process parameters

* Parameters are now configured via **structs**:

  ```cpp
  struct AtomicLayerProcessParameters {
    unsigned numCycles = 1;
    double pulseTime = 1.0;
    double coverageTimeStep = 1.0;
    double purgePulseTime = 0.0;
  };

  struct CoverageParameters {
    double coverageDeltaThreshold = 0.0;
    unsigned maxIterations = std::numeric_limits<unsigned>::max();
  };
  ```
* `AtomicLayerProcessParameters` control ALD behavior.
  The process automatically determines if it is an atomic-layer process based on the chosen model.
* `CoverageParameters` support coverage-based processes.
* `RayTracingParameters` and `AdvectionParameters` follow the same pattern.
* Direct setting of individual parameters on the process object has been **removed**.

### Other changes

* Cleaner meta-data handling in processes.
* New `calculateFlux` entry in process path.
* Improved surface mesh creation and point-to-element data mapping.
* Extrusion and slice utilities exposed in Python (`Extrude`, `Slice`).
* GDS reader fixes and mask blur improvements.
* CI: standard OpenMP on macOS; Python wheels depend on updated `viennals`.

## Migration guide

### From `viennaps2d` / `viennaps3d` to `viennaps`

* Before:

  ```python
  import viennaps2d as vps
  dom = vps.Domain(...)
  ```
* After (option A: default 2D):

  ```python
  import viennaps as vps
  dom = vps.Domain(...)
  ```
* After (option B: explicit 2D/3D):

  ```python
  from viennaps import d2, d3
  dom2 = d2.Domain(...)
  dom3 = d3.Domain(...)
  ```
* After (option C: set default dimension once):

  ```python
  import viennaps as vps
  vps.setDimension(3)
  dom = vps.Domain(...)  # 3D
  ```

### Selecting a flux engine

* Add where you configure the process:

  ```python
  p.setFluxEngineType(vps.FluxEngineType.CPU_DISK)
  # or
  p.setFluxEngineType(vps.FluxEngineType.GPU_TRIANGLE)
  ```

### Process parameters

* Before:

  ```cpp
  proc.numCycles = 10; // direct assignment
  ```
* After:

  ```cpp
  ps::AtomicLayerProcessParameters alp;
  alp.numCycles = 10;
  proc.setParameters(alp);
  ```
