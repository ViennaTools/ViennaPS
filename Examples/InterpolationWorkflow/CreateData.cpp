#include "DimensionExtraction.hpp"
#include "Parameters.hpp"
#include "TrenchDeposition.hpp"

int main(int argc, char *argv[]) {
  using NumericType = double;
  constexpr int D = 2;

  // The parameters we are interested in
  std::vector<NumericType> stickingProbabilities = {1., 0.8, 0.3};
  std::vector<NumericType> taperAngles = {-2., 0., 2.};

  static constexpr int NumberOfSamples = 20;

  auto extractor = psSmartPointer<DimensionExtraction<NumericType, D>>::New();
  extractor->setNumberOfSamples(NumberOfSamples);

  // The data we are going to store consists of time, stickingProbability,
  // taperAngle and the sampled geometry descriptors as provided by the
  // extractor.
  static constexpr int DataDimension = NumberOfSamples + 3;

  std::string filename = "output.csv";
  auto writer =
      psSmartPointer<psCSVWriter<NumericType, DataDimension>>::New(filename);

  std::string header =
      "taperAngle,stickingProbability,time,depth,diameters\nData generated by "
      "simple trench deposition example."
      "\nRelative locations of diameter measurements:\n!";

  auto sampleLocations = extractor->getSampleLocations();
  header += decltype(writer)::element_type::join(sampleLocations.begin(),
                                                 sampleLocations.end());
  writer->setHeader(header);
  writer->initialize();

  Parameters<NumericType> params;
  for (auto taperAngle : taperAngles) {
    params.taperAngle = taperAngle;
    for (auto stickingProbability : stickingProbabilities) {
      params.stickingProbability = stickingProbability;
      std::cout << "taperAngle=" << taperAngle
                << ", sticking probability=" << stickingProbability << '\n';

      // Using the advection callback, we can run the extraction at
      // certain pre-defined advection timesteps.
      NumericType deltaT = 1. / params.stickingProbability;

      auto advectionCallback =
          psSmartPointer<AdvectionCallback<NumericType, D, DataDimension>>::New(
              deltaT);

      std::vector<NumericType> prefixData = {params.taperAngle,
                                             params.stickingProbability};

      advectionCallback->setExtractor(extractor);
      advectionCallback->setWriter(writer);
      advectionCallback->setPrefixData(
          psSmartPointer<std::vector<NumericType>>::New(prefixData));

      auto geometry = psSmartPointer<psDomain<NumericType, D>>::New();
      psMakeTrench<NumericType, D>(geometry, params.gridDelta /* grid delta */,
                                   params.xExtent /*x extent*/,
                                   params.yExtent /*y extent*/,
                                   params.trenchWidth /*trench width*/,
                                   params.trenchHeight /*trench height*/,
                                   params.taperAngle /* tapering angle */)
          .apply();

      executeProcess<NumericType, D>(geometry, params, advectionCallback);

      writer->flush();
    }
  }

  return EXIT_SUCCESS;
}